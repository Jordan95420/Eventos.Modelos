// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Eventos.API.Migrations
{
    [DbContext(typeof(AppContext))]
    [Migration("20250509203930_v1Eventos")]
    partial class v1Eventos
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Eventos.Modelos.Asistente", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Codigo"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Codigo");

                    b.ToTable("Asistentes");
                });

            modelBuilder.Entity("Eventos.Modelos.Certificado", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Codigo"));

                    b.Property<int>("EventoCodigo")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Codigo");

                    b.HasIndex("EventoCodigo");

                    b.ToTable("Certificados");
                });

            modelBuilder.Entity("Eventos.Modelos.CertificadoAsistente", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Codigo"));

                    b.Property<string>("Asistencia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AsistenteCodigo")
                        .HasColumnType("int");

                    b.Property<int>("CertificadoCodigo")
                        .HasColumnType("int");

                    b.HasKey("Codigo");

                    b.HasIndex("AsistenteCodigo");

                    b.HasIndex("CertificadoCodigo");

                    b.ToTable("CertificadosAsistentes");
                });

            modelBuilder.Entity("Eventos.Modelos.CertificadoPonente", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Codigo"));

                    b.Property<int>("CertificadoCodigo")
                        .HasColumnType("int");

                    b.Property<int>("PonenteCodigo")
                        .HasColumnType("int");

                    b.HasKey("Codigo");

                    b.HasIndex("CertificadoCodigo");

                    b.HasIndex("PonenteCodigo");

                    b.ToTable("CertificadosPonentes");
                });

            modelBuilder.Entity("Eventos.Modelos.EspacioAsignado", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Codigo"));

                    b.Property<string>("Espacio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HorarioFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HorarioInicio")
                        .HasColumnType("datetime2");

                    b.HasKey("Codigo");

                    b.ToTable("EspaciosAsignados");
                });

            modelBuilder.Entity("Eventos.Modelos.Evento", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Codigo"));

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lugar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Codigo");

                    b.ToTable("Eventos");
                });

            modelBuilder.Entity("Eventos.Modelos.EventoEnLugarAsignado", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Codigo"));

                    b.Property<int>("EspacioAsignadoCodigo")
                        .HasColumnType("int");

                    b.Property<int>("EventoCodigo")
                        .HasColumnType("int");

                    b.HasKey("Codigo");

                    b.HasIndex("EspacioAsignadoCodigo");

                    b.HasIndex("EventoCodigo");

                    b.ToTable("EventosEnLugaresAsignados");
                });

            modelBuilder.Entity("Eventos.Modelos.Inscripcion", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Codigo"));

                    b.Property<int>("EventoCodigo")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaFinEvento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicioEvento")
                        .HasColumnType("datetime2");

                    b.HasKey("Codigo");

                    b.HasIndex("EventoCodigo");

                    b.ToTable("Inscripciones");
                });

            modelBuilder.Entity("Eventos.Modelos.InscripcionAsistente", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Codigo"));

                    b.Property<int>("AsistenteCodigo")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaInscripcion")
                        .HasColumnType("datetime2");

                    b.Property<int>("InscripcionCodigo")
                        .HasColumnType("int");

                    b.HasKey("Codigo");

                    b.HasIndex("AsistenteCodigo");

                    b.HasIndex("InscripcionCodigo");

                    b.ToTable("InscripcionesAsistentes");
                });

            modelBuilder.Entity("Eventos.Modelos.InscripcionPonente", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Codigo"));

                    b.Property<DateTime>("FechaInscripcion")
                        .HasColumnType("datetime2");

                    b.Property<int>("InscripcionCodigo")
                        .HasColumnType("int");

                    b.Property<int>("PonenteCodigo")
                        .HasColumnType("int");

                    b.HasKey("Codigo");

                    b.HasIndex("InscripcionCodigo");

                    b.HasIndex("PonenteCodigo");

                    b.ToTable("InscripcionesPonentes");
                });

            modelBuilder.Entity("Eventos.Modelos.Pago", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Codigo"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InscripcionAsistenteCodigo")
                        .HasColumnType("int");

                    b.Property<string>("TipoDePago")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Codigo");

                    b.HasIndex("InscripcionAsistenteCodigo");

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("Eventos.Modelos.Ponente", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Codigo"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Codigo");

                    b.ToTable("Ponentes");
                });

            modelBuilder.Entity("Eventos.Modelos.PonenteEvento", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Codigo"));

                    b.Property<int>("EventoCodigo")
                        .HasColumnType("int");

                    b.Property<int>("PonenteCodigo")
                        .HasColumnType("int");

                    b.HasKey("Codigo");

                    b.HasIndex("EventoCodigo");

                    b.HasIndex("PonenteCodigo");

                    b.ToTable("PonentesEventos");
                });

            modelBuilder.Entity("Eventos.Modelos.Certificado", b =>
                {
                    b.HasOne("Eventos.Modelos.Evento", "Eventos")
                        .WithMany("Certificados")
                        .HasForeignKey("EventoCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Eventos");
                });

            modelBuilder.Entity("Eventos.Modelos.CertificadoAsistente", b =>
                {
                    b.HasOne("Eventos.Modelos.Asistente", "Asistente")
                        .WithMany()
                        .HasForeignKey("AsistenteCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eventos.Modelos.Certificado", "Certificado")
                        .WithMany()
                        .HasForeignKey("CertificadoCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asistente");

                    b.Navigation("Certificado");
                });

            modelBuilder.Entity("Eventos.Modelos.CertificadoPonente", b =>
                {
                    b.HasOne("Eventos.Modelos.Certificado", "Certificado")
                        .WithMany()
                        .HasForeignKey("CertificadoCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eventos.Modelos.Ponente", "Ponente")
                        .WithMany()
                        .HasForeignKey("PonenteCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certificado");

                    b.Navigation("Ponente");
                });

            modelBuilder.Entity("Eventos.Modelos.EventoEnLugarAsignado", b =>
                {
                    b.HasOne("Eventos.Modelos.EspacioAsignado", "EspacioAsignado")
                        .WithMany("EventosEnLugaresAsignados")
                        .HasForeignKey("EspacioAsignadoCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eventos.Modelos.Evento", "Evento")
                        .WithMany()
                        .HasForeignKey("EventoCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EspacioAsignado");

                    b.Navigation("Evento");
                });

            modelBuilder.Entity("Eventos.Modelos.Inscripcion", b =>
                {
                    b.HasOne("Eventos.Modelos.Evento", "Evento")
                        .WithMany("Inscripciones")
                        .HasForeignKey("EventoCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");
                });

            modelBuilder.Entity("Eventos.Modelos.InscripcionAsistente", b =>
                {
                    b.HasOne("Eventos.Modelos.Asistente", "Asistente")
                        .WithMany()
                        .HasForeignKey("AsistenteCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eventos.Modelos.Inscripcion", "Inscripcion")
                        .WithMany()
                        .HasForeignKey("InscripcionCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asistente");

                    b.Navigation("Inscripcion");
                });

            modelBuilder.Entity("Eventos.Modelos.InscripcionPonente", b =>
                {
                    b.HasOne("Eventos.Modelos.Inscripcion", "Inscripcion")
                        .WithMany()
                        .HasForeignKey("InscripcionCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eventos.Modelos.Ponente", "Ponente")
                        .WithMany()
                        .HasForeignKey("PonenteCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inscripcion");

                    b.Navigation("Ponente");
                });

            modelBuilder.Entity("Eventos.Modelos.Pago", b =>
                {
                    b.HasOne("Eventos.Modelos.InscripcionAsistente", "InscripcionAsistente")
                        .WithMany()
                        .HasForeignKey("InscripcionAsistenteCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InscripcionAsistente");
                });

            modelBuilder.Entity("Eventos.Modelos.PonenteEvento", b =>
                {
                    b.HasOne("Eventos.Modelos.Evento", "Evento")
                        .WithMany()
                        .HasForeignKey("EventoCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eventos.Modelos.Ponente", "Ponente")
                        .WithMany()
                        .HasForeignKey("PonenteCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("Ponente");
                });

            modelBuilder.Entity("Eventos.Modelos.EspacioAsignado", b =>
                {
                    b.Navigation("EventosEnLugaresAsignados");
                });

            modelBuilder.Entity("Eventos.Modelos.Evento", b =>
                {
                    b.Navigation("Certificados");

                    b.Navigation("Inscripciones");
                });
#pragma warning restore 612, 618
        }
    }
}
